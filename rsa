#!/usr/bin/python3

import sys
import math

def pollard_rho(n):
    """
    Pollard's Rho algorithm for integer factorization.

    Description:
        Pollard Rho algorithm is a randomized algorithm used for
        integer factorization. It is particularly effective for factoring
        large composite unmbers into their prime facrors.

    Args:
        n (int): The integer to be factored.

    Returns:
        int: A factor of n, or None if no factor is found.
    """
    def f(x):
        """
            The f() is a crucial part of the algorithm.

        Description:
            The sequence of numbers generated by applying f is used to find
            common divisors and, ultimately, prime facrors of the input int.

        Args:
           `x`(int): The current value.

        Returns:
            `int`: The result of applying f to x.
        """
        return (x**2 + 1) % n

    x = 2
    y = 2
    d = 1

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = math.gcd(abs(x - y), n)

    if d == n:
        return None  # Failed to find a factor
    else:
        return n // d, d

#   """ Init step: check argument """
if len(sys.argv) < 2:
    print("Usage: factors <file>", file=sys.stderr)
    exit(1)

#    """ Open & read text file and parse """
try:
    with open(sys.argv[1], "r") as f:
            lines = f.readlines()
            for line in lines:
                nb = line.strip('\n')
                factors = pollard_rho(int(nb))
                if factors is not None:
                    factor1, factor2 = factors
                    if factor1 < factor2:
                        tmp = factor2
                        factor2 = factor1
                        factor1 = tmp
                    print(f"{nb}={factor1}*{factor2}")
except Exception as msg:
    print(msg)
