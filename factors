#!/usr/bin/python3
# factors
"""
Module to fctorize as many numbers as possible into a product of two smaller numbers.
"""
import sys
import math

def pollard_rho(n):
    """
    Pollard's Rho algorithm for integer factorization.

    Description:
        Pollard Rho algorithm is a randomized algorithm used for
        integer factorization. It is particularly effective for factoring
        large composite unmbers into their prime facrors.

    Args:
        n (int): The integer to be factored.

    Returns:
        int: A factor of n, or None if no factor is found.
    """
    def f(x):
        """
            The f() is a crucial part of the algorithm.

        Description:
            The sequence of numbers generated by applying f is used to find
            common divisors and, ultimately, prime facrors of the input int.

        Args:
           `x`(int): The current value.

        Returns:
            `int`: The result of applying f to x.
        """
        return ((x**2 + 1) % n)

    x = 2
    y = x
    d = 1

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = math.gcd(abs(x - y), n)

    """ Failed to find a factor """
    if d == n:
        return (None)
    return (d, n // d)


if len(sys.argv) != 2:
    """Init step: check argument"""
    print("Usage: factors <file>", file=sys.stderr)
    exit(0)

try:
    """ Open & read text file and parse """
    with open(sys.argv[1], "r") as input_file:
        content = input_file.readlines()
    for line in content:
        num = line.strip('\n')
        if not int(num) % 2:
            print("{:d}={:d}*{:d}".format(int(num), int(int(num) / 2), 2))
        else:
            factors = pollard_rho(int(num))
            if factors is not None:
                factor1, factor2 = factors
                print(f"{num}={factor1}*{factor1}")
            else:
                n = 3
                while n < math.sqrt(num):
                    if not num % n:
                        print("{:d}={:d}*{:d}".format(int(num), int(int(num) \
                                / n), n))
                        break
                    n += 1

except:
    print("Error! ...program terminated")
    exit(1)
